### basic ###
# File name of io.yaml file, which should exist in the directory from which you call dannce functions
io_config: io_social.yaml
random_seed: 1024

### data ###
dataset: label3d # dataset type, options are 'label3d', 'rat7m', 'pair'
camnames: ['Camera1', 'Camera2', 'Camera3', 'Camera4', 'Camera5', 'Camera6']
n_views: 6
num_validation_per_exp: 4
data_split_seed: 1024

crop_height: [0, 1200]
crop_width: [0, 1920]

vmin: -120 # lower and upper bound of the 3D volume (in mm) anchored on animal
vmax: 120
# OR, use vol_size: 240 to replace the above two lines
nvox: 80
interp: nearest

expval: True # if False, will use a 3D Gaussian instead

### data augmentations ###      
medfilt_window: 30
rand_view_replace: True
n_rand_views: 6
mirror_augmentation: False
left_keypoints: [1, 7, 8, 9, 10, 15, 16, 17, 18]
right_keypoints: [2, 11, 12, 13, 14, 19, 20, 21, 22]

augment_hue: False
augment_brightness: False
augment_bright_val: 0.01

### model ###
net_type: "dannce" # options "dannce", "compressed_dannce"
n_channels_in: 3
n_channels_out: 23 # number of output channels

### train ###
batch_size: 4
epochs: 1200
save_period: 100

# Options:
# 'new': initializes and trains a network from scratch
# 'finetune': loads in pre-trained weights and fine-tuned from there
# 'continued': initializes a full model, including optimizer state, and continuous training from the last full model checkpoint
train_mode: new
# dannce_finetune_weights: # needed for 'finetune' and 'continued' mode

loss: 
  L1Loss:
    loss_weight: 1.0

metric: ['euclidean_distance_3D']

lr: 0.0001
lr_scheduler:
  type: StepLR
  args: 
    step_size: 50
    gamma: 0.1
